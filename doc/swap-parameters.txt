*swap-parameters.txt* Swap parameters of a function with a single command.
===============================================================================
#        ____  _  _   __   ____    ____   __   ____   __   _  _  ____         #
#       / ___)/ )( \ / _\ (  _ \  (  _ \ / _\ (  _ \ / _\ ( \/ )/ ___)        #
#       \___ \\ /\ //    \ ) __/   ) __//    \ )   //    \/ \/ \\___ \        #
#       (____/(_/\_)\_/\_/(__)    (__)  \_/\_/(__\_)\_/\_/\_)(_/(____/        #
#                                                                             #
===============================================================================
CONTENTS                                                 *swap_params_contents*

    1. Description..................................|swap_params_description|
    2. Usage..............................................|swap_params_usage|
    3. Options..........................................|swap_params_options|
    3. Examples........................................|swap_params_examples|

===============================================================================
DESCRIPTION                                           *swap_params_description*

  Swap parameters of a function with a single command.

===============================================================================
USAGE                                                       *swap_params_usage*

  In normal mode, these key commands will swap parameters:

    * [count]gs Swap the parameter under the cursor with the next one. 
    * [count]gS Swap the current parameter with the previous parameter.

  Note: [count] defaults to 1.

===============================================================================
OPTIONS                                                   *swap_params_options*

g:SwapParametersSuppressPythonWarning
    When set to 1, this suppresses the error that your vim was not compiled
    with +python.

g:SwapParametersMapForwards
    Set to preferred mapping for gs

g:SwapParameterMapBackwards
    Set to preferred mapping for gS

===============================================================================
EXAMPLES                                                 *swap_params_examples*

 Below are examples of what happens after pressing gs (equivalent to 1gs).
 On each line the left side shows the line before typing gs, and the right
 side shows the effect. The cursor position is depicted with || symbols.
 par|m|1 means that the cursor is on the character m.

>
 
                   fun(par|m|1, parm2)                    fun(parm2, parm|1|)
                 fun(par|m|1(), parm2)                  fun(parm2, parm1(|)|)
                 fun(parm1(|)|, parm2)                  fun(parm2, parm1(|)|)
         fun(parm|1|(arg,arg2), parm2)          fun(parm2, parm1(arg,arg2|)|)
         fun(parm1|(|arg,arg2), parm2)          fun(parm2, parm1(arg,arg2|)|)
         fun(parm1(arg,arg2|)|, parm2)          fun(parm2, parm1(arg,arg2|)|)
        fun(parm1(arg, arg2|)|, parm2)         fun(parm2, parm1(arg, arg2|)|)
               fun(arg1, ar|g|2, arg3)                fun(arg1, arg3, arg|2|)
                   array[a|r|g1, arg2]                    array[arg2, arg|1|]
                 fun(par|m|1[], parm2)                  fun(parm2, parm1[|]|)
                 fun(parm1[|]|, parm2)                  fun(parm2, parm1[|]|)
                 fun(par|m|1, array[])                  fun(array[], parm|1|)
                            fun(|a|,b)                             fun(b,|a|)
                      [(p1, p2|)|, p3]                       [p3, (p1, p2|)|]
       for |a|, b in some_dict.items()        for b, |a| in some_dict.items()
<

 The following lines demonstrate using gS (swap with previous).

>
                   fun(parm2, par|m|1)                    fun(|p|arm1, parm2)
                 fun(parm2, par|m|1())                  fun(|p|arm1(), parm2)
                 fun(parm2, parm1(|)|)                  fun(|p|arm1(), parm2)
         fun(parm2, parm|1|(arg,arg2))          fun(|p|arm1(arg,arg2), parm2)
         fun(parm2, parm1|(|arg,arg2))          fun(|p|arm1(arg,arg2), parm2)
         fun(parm2, parm1(arg,arg2|)|)          fun(|p|arm1(arg,arg2), parm2)
        fun(parm2, parm1(arg, arg2|)|)         fun(|p|arm1(arg, arg2), parm2)
               fun(arg1, ar|g|2, arg3)                fun(|a|rg2, arg1, arg3)
               fun(arg1, arg2, ar|g|3)                fun(arg1, |a|rg3, arg2)
                   array[arg2, a|r|g1]                    array[|a|rg1, arg2]
                 fun(parm2, par|m|1[])                  fun(|p|arm1[], parm2)
                 fun(parm2, parm1[|]|)                  fun(|p|arm1[], parm2)
                 fun(array[], par|m|1)                  fun(|p|arm1, array[])
                            fun(b,|a|)                             fun(|a|,b)
       for a, |b| in some_dict.items()        for |b|, a in some_dict.items()
<

 The above examples are auto-generated from the tests.

 Dot repeats don't work with this binding but pressing gs is quick enough I
 think. 

 The column position of the cursor is preserved when you go to the next
 line after swap. This allows for streamlined swapping of parameters in the
 case like this:
>
 fun(arg2, blah)
 fun(arg2, blahble)
 fun(arg2, blahblahblah)
<
 You would put cursor on arg2, and the gsjgsjgs

 
 This script is written in python. Therefore it needs Vim compiled with
 +python option (:version), as well as Python installed in the system.

vim:ft=help:et:ts=2:sw=2:sts=2:norl
